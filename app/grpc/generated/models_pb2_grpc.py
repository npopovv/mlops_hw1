# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import models_pb2 as models__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False


try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in models_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainModel = channel.unary_unary(
            "/model.ModelService/TrainModel",
            request_serializer=models__pb2.TrainRequest.SerializeToString,
            response_deserializer=models__pb2.TrainResponse.FromString,
            _registered_method=True,
        )
        self.GetModels = channel.unary_unary(
            "/model.ModelService/GetModels",
            request_serializer=models__pb2.Empty.SerializeToString,
            response_deserializer=models__pb2.ModelList.FromString,
            _registered_method=True,
        )
        self.Predict = channel.unary_unary(
            "/model.ModelService/Predict",
            request_serializer=models__pb2.PredictRequest.SerializeToString,
            response_deserializer=models__pb2.PredictResponse.FromString,
            _registered_method=True,
        )
        self.DeleteModel = channel.unary_unary(
            "/model.ModelService/DeleteModel",
            request_serializer=models__pb2.DeleteRequest.SerializeToString,
            response_deserializer=models__pb2.DeleteResponse.FromString,
            _registered_method=True,
        )
        self.Status = channel.unary_unary(
            "/model.ModelService/Status",
            request_serializer=models__pb2.Empty.SerializeToString,
            response_deserializer=models__pb2.StatusResponse.FromString,
            _registered_method=True,
        )


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrainModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "TrainModel": grpc.unary_unary_rpc_method_handler(
            servicer.TrainModel,
            request_deserializer=models__pb2.TrainRequest.FromString,
            response_serializer=models__pb2.TrainResponse.SerializeToString,
        ),
        "GetModels": grpc.unary_unary_rpc_method_handler(
            servicer.GetModels,
            request_deserializer=models__pb2.Empty.FromString,
            response_serializer=models__pb2.ModelList.SerializeToString,
        ),
        "Predict": grpc.unary_unary_rpc_method_handler(
            servicer.Predict,
            request_deserializer=models__pb2.PredictRequest.FromString,
            response_serializer=models__pb2.PredictResponse.SerializeToString,
        ),
        "DeleteModel": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteModel,
            request_deserializer=models__pb2.DeleteRequest.FromString,
            response_serializer=models__pb2.DeleteResponse.SerializeToString,
        ),
        "Status": grpc.unary_unary_rpc_method_handler(
            servicer.Status,
            request_deserializer=models__pb2.Empty.FromString,
            response_serializer=models__pb2.StatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "model.ModelService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("model.ModelService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrainModel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/model.ModelService/TrainModel",
            models__pb2.TrainRequest.SerializeToString,
            models__pb2.TrainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetModels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/model.ModelService/GetModels",
            models__pb2.Empty.SerializeToString,
            models__pb2.ModelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Predict(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/model.ModelService/Predict",
            models__pb2.PredictRequest.SerializeToString,
            models__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteModel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/model.ModelService/DeleteModel",
            models__pb2.DeleteRequest.SerializeToString,
            models__pb2.DeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Status(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/model.ModelService/Status",
            models__pb2.Empty.SerializeToString,
            models__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
